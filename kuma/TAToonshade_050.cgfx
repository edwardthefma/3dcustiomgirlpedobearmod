/*********************************************************
	"ToonShader" for cgFxShader v0.50
								(c) 2006 TechArts Inc.
**********************************************************/
#ifndef OBSIDIAN_3D
#define	PROFILE_VS	arbvp1
#define	PROFILE_PS	arbfp1
#endif

string Category		= "Effects\\Cg\\NPR";
string keywords		= "Non Photo-realistic";
string description	= "TA ToonShader v0.50";

//----------------------------------
//	tweakables
//----------------------------------
float	Ambient
<
	string UIName = "Ambient";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 0.0;

float	HighLight
<
	string UIName = "HighLight";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 0.0;

float Thickness
<
	string UIName = "Thickness";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
> = 0.001;

float ColorBlend
<
	string UIName = "ColorBlend";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float ShadeBlend
<
	string UIName = "ShadeBlend";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float HighLightBlend
<
	string UIName = "HighLightBlend";
	string UIWidget = "Slider";
	float UIMin =  0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float HighLightPower
<
	string UIName = "HighLightPower";
	string UIWidget = "Slider";
	float UIMin = 0;
	float UIMax = 1000;
	float UIStep = 1;
> = 100;

float4	PenColor		: Diffuse
<
	string UIName =  "PenColor";
	string UIWidget = "Color";
> = { 0.0f, 0.0f, 0.0f, 1.0f };

float4	ShadowColor		: Diffuse
<
	string UIName =  "ShadowColor";
	string UIWidget = "Color";
> = { 0.0f, 0.0f, 0.0f, 1.0f };


float4 LightDir : Direction
<
> = { 0, 0, -1, 0 };

texture	ShadeTex_texture	: Diffuse;
texture	ColorTex_texture	: Diffuse;

//----------------------------------
//	un-tweakables
//----------------------------------
uniform float4x4	wld			: World;
uniform float4x4	wv			: WorldView;
uniform float4x4	wvp			: WorldViewProjection;
uniform float4x4	view		: View;
uniform float4x4	proj		: Projection;

sampler2D ShadeTex = sampler_state
{
	Texture   = <ShadeTex_texture>;

	WrapS = CLAMP;
	WrapT = CLAMP;

	MagFilter = Nearest;
	MinFilter = Nearest;
};

sampler2D ColorTex = sampler_state
{
	Texture		= <ColorTex_texture>;

	WrapS = REPEAT;
	WrapT = REPEAT;

	MagFilter = Linear;
	MinFilter = Linear;
};


#ifdef OBSIDIAN_3D
const uniform float4x4	LocalBoneMats[16];
struct appdata {
	float3	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float4	Tangent		: TEXCOORD1;
	float4	Binormal	: TEXCOORD2;
	float4	Normal		: NORMAL;
	float4	VWeights	: TEXCOORD3;
	float4	BoneIdxs	: TEXCOORD4;
};
#else
struct appdata {
	float3	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float4	Tangent		: TEXCOORD1;
	float4	Binormal	: TEXCOORD2;
	float4	Normal		: NORMAL;
};
#endif

struct cVertexData {
	float4	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float3	Normal		: TEXCOORD1;
};

#ifdef OBSIDIAN_3D

//-----------------------------------------------------------
//  ?X?L?????` (???_?^?@??)
//-----------------------------------------------------------
void calc_skindeform(

	float4		inpos,
	float3		innor,
	float4		weights,
	float4		idxs,

	out float4	outpos,
	out float3	outnor
)
{
	float4 npos = 0, nnor = 0;

	for ( int i = 0; i < 4; ++i ) {
		int   mi = idxs[i];
		float  w = weights[i];
		npos += mul( LocalBoneMats[mi], float4( inpos.xyz, 1 ) ) * w;
		nnor += mul( LocalBoneMats[mi], float4( innor.xyz, 0 ) ) * w;
	}

	outpos = float4( npos.xyz, 1 );
	outnor = normalize( nnor.xyz );
}

//-----------------------------------------------------------
//  ?X?L?????` (???_????)
//-----------------------------------------------------------
void calc_skindeform_nonorm(

	float4		inpos,
	float4		weights,
	float4		idxs,

	out float4	outpos
)
{
	float4 npos = 0;
	for ( int i = 0; i < 4; ++i ) {
		int   mi = idxs[i];
		float  w = weights[i];
		npos += mul( LocalBoneMats[mi], inpos ) * w;
	}
	outpos = float4( npos.xyz, 1 );
}

#endif

cVertexData cInkVS( appdata IN )
{
	cVertexData OUT = (cVertexData)0;
#ifdef OBSIDIAN_3D
	float4 opos;
	float3 pos = IN.Position.xyz + ( IN.Normal.xyz * Thickness );
	calc_skindeform_nonorm( float4( pos.xyz, 1 ), IN.VWeights, IN.BoneIdxs, opos );
#else
	float3 opos = IN.Position.xyz + ( IN.Normal.xyz * Thickness );
#endif
	OUT.Position = mul( wvp, float4( opos.xyz, 1 ) );
	return OUT;
}

float4 cInkPS( cVertexData IN ) : COLOR
{
	return PenColor;
}

cVertexData cMainVS( appdata IN )
{
	cVertexData OUT = (cVertexData)0;

#ifdef OBSIDIAN_3D
	float4 pos; float3 nor;
	calc_skindeform( float4( IN.Position.xyz, 1.0 ), IN.Normal, IN.VWeights, IN.BoneIdxs, pos, nor );
	OUT.Position	= mul( wvp, pos );
	OUT.UV			= IN.UV;
	//OUT.Normal	= normalize( mul( wld, float4( nor.xyz, 0.0 ) ) );
	OUT.Normal		= normalize( IN.Normal );
#else
	OUT.Position	= mul( wvp, float4( IN.Position.xyz, 1.0 ) );
	OUT.UV			= IN.UV;
	OUT.Normal		= normalize( mul( wld, float4( IN.Normal.xyz, 0.0 ) ) );
#endif
	return OUT;
}

float4 cMainPS( cVertexData IN ) : COLOR
{
#ifdef OBSIDIAN_3D
	float3	LD		 = LightDir.xyz;
	float	L		 = dot( IN.Normal, normalize( -LD ) );
#else
	float	L		 = dot( IN.Normal, normalize( -LightDir ) );
#endif
	float	lp		 = min( 1, max( 0, L + Ambient * 0.01 ) );
	float	hp		 = pow( min( 1, max( 0, L + HighLight * 0.01 ) ), HighLightPower );

	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;

	col  = ( texcol * ColorBlend * 0.1 ) * ( shadecol * ShadeBlend * 0.1 );
	col += hl * HighLightBlend * 0.1;

	return float4( col.rgb, texcol.a );
}

cVertexData cShadowVS( appdata IN )
{
	cVertexData OUT = (cVertexData)0;
#ifdef OBSIDIAN_3D
	float4 opos, pos;
	calc_skindeform_nonorm( float4( IN.Position.xyz, 1 ), IN.VWeights, IN.BoneIdxs, opos );
	pos = mul( wv, opos );
	pos.y = 0;
	OUT.Position = mul( proj, pos );
#else
	float4 pos = mul( wld, float4( IN.Position.xyz, 1.0 ) );
	pos.y = 0;
	OUT.Position = mul( proj, mul( view, pos ) );
#endif
	return OUT;
}

float4 cShadowPS( cVertexData IN ) : COLOR
{
	return ShadowColor;
}

technique ShadowOff
{
	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CW;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram	= compile PROFILE_PS cInkPS();
	}

	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CCW;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}


technique ShadowOn
{
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}

	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CW;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram	= compile PROFILE_PS cInkPS();
	}

	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CCW;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}

technique ShadowOff_InkOff
{
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CCW;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}

technique ShadowOn_InkOff
{
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= true;
		FrontFace		= CCW;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}

	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullFaceEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
}

